package com.controle.vacinas.dto;




import javax.validation.constraints.NotEmpty;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;
import org.hibernate.validator.constraints.Length;
import org.modelmapper.ModelMapper;

import com.controle.vacinas.entity.VacinaEntity;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;


@Data
@AllArgsConstructor
@NoArgsConstructor

public class VacinaDTO {
	


	
	
	private int id;
	
	
	@NotEmpty(message ="É obrigatório o nome da vacina") //PERMITE CAMPO VAZIO, MAS NÃO PERMITE CAMPO NULO,  CASO ACONTEÇA A MENSAGEM É EXIBIDA
	@NotNull (message ="Preenchimento Obrigatório") //NÃO PODE ESTAR VAZIO, CASO ACONTEÇA, A MENSAGEM É EXIBIDA
	@Length(min = 3 , max = 80, message = "O numero de caracteres deve ser entre 3 e 80") //TAMANHO DOS CARACTERIES
	@Pattern( regexp = "^[A-Za-záàâãéèêíïóôõöúçñÁÀÂÃÉÈÍÏÓÔÕÖÚÇÑ ]*$", message = "É valido apenas caracteres")
	private String nome;
	
	@NotEmpty(message ="Preenchimento Obrigatório")
	@NotNull (message ="Preenchimento Obrigatório") 
	@Length(min = 3 , max = 80, message = "O numero de caracteres deve ser entre 3 e 80")
	@Pattern( regexp = "^[A-Za-záàâãéèêíïóôõöúçñÁÀÂÃÉÈÍÏÓÔÕÖÚÇÑ ]*$", message = "É valido apenas caracteres")
	private String fabricante;
	
	@NotEmpty(message ="Quantidade de doses é obrigatório") 
	@NotNull (message ="Preenchimento Obrigatório")
	@Length(min = 1 , max = 1000, message = "O numero de caracteres deve ser entre 1 e 1000") 
	@Pattern( regexp = "[0-9-. ]", message = "É valido apenas números")
	private int doses; 
	
	
	@NotEmpty(message =" Quantidade do intervalo de dias é obrigatório") 
	@NotNull (message ="Preenchimento Obrigatório") 
	@Length(min = 1 , max = 1000, message = "O numero de caracteres deve ser entre 1 e 1000")
	@Pattern( regexp = "[0-9-]", message = "É valido apenas números")
	private int intervalo; 

	
	
	
	
public VacinaEntity toEntity() {
		
		ModelMapper mapper = new ModelMapper();
		
		return mapper.map(this, VacinaEntity.class);
	

	}
}
